/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

const MAX_HP = 100;

class Knight {
  constructor(id) {
    this.id = id;
    this.hp = MAX_HP;
  }

  receiveDamage(damage) {
    this.hp -= damage;
  }

  hasDied() {
    return this.hp <= 0;
  }

  hit() {
    let min = Math.ceil(1);
    let max = Math.floor(6);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
}

Knight.MAX_HP = MAX_HP;

// Schedule each turn to appear with 1s of delay between each other
// So the 1st turns appear after 1s, the 2nd after 2s, and so on...
let tickerMultiplier = 0;
const ONE_SECOND = 1000;
const delayedOutput = stdout => event => {
  tickerMultiplier += 1;
  setTimeout(() => stdout(event), tickerMultiplier * ONE_SECOND);
};

const MESSAGE_TYPES = {
  round: 'round',
  dead: 'dead',
  winner: 'winner'
};

class Game {
  constructor(knights, output) {
    this.round = 0;
    this.knights = knights;
    this.output = delayedOutput(output);
    this.winner = null;
  }

  hasWinner(attacker, defender) {
    return attacker && !defender;
  }

  run() {
    if (this.knights.length == 0) {
      return;
    }

    let attacker = this.knights.shift();
    let defender = this.knights.shift();
    this.round += 1;
    while (!this.hasWinner(attacker, defender)) {
      let damage = attacker.hit();
      defender.receiveDamage(damage);
      this.output({ type: MESSAGE_TYPES.round, attacker, defender, damage, round: this.round });

      this.knights.push(attacker);

      if (defender.hasDied()) {
        this.output({ type: MESSAGE_TYPES.dead, defender });
        attacker = this.knights.shift();
      } else {
        attacker = defender;
      }

      defender = this.knights.shift();
    }

    this.output({ type: MESSAGE_TYPES.winner, attacker });
    this.round += 1;
    return attacker;
  }
}

Game.MESSAGE_TYPES = MESSAGE_TYPES;

exports.Knight = Knight;
exports.Game = Game;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

let Knight = __webpack_require__(0).Knight;
let Game = __webpack_require__(0).Game;

const formatEventOutput = ({ type, attacker, defender, damage }) => {
  switch (type) {

    case Game.MESSAGE_TYPES.round:
      return `ðŸ‘Š - Knight ${attacker.id} hit Knight ${defender.id} with ${damage} damage
      Kinght ${defender.id} HP: ${defender.hp}/${Knight.MAX_HP}
      `;

    case Game.MESSAGE_TYPES.dead:
      return `ðŸ’€ - Knight ${defender.id} died !!!!!`;

    case Game.MESSAGE_TYPES.winner:
      return `ðŸ˜Ž - Knight ${attacker.id} win`;

    default:
      return 'error';

  }
};

function stdout(event) {
  let content = document.getElementById("content");
  let p = document.createElement("p");
  p.appendChild(document.createTextNode(formatEventOutput(event)));
  content.appendChild(p);
  console.log('content: ', content.innerHTML);
}

let game = new Game([new Knight(1), new Knight(2), new Knight(3), new Knight(4), new Knight(5), new Knight(6)], stdout);

game.run();

/***/ })
/******/ ]);